# ===============================
# üì¶ –Ü–º–ø–æ—Ä—Ç–∏
# ===============================
from flask import Flask, request
from flask_restx import Api, Resource, fields, Namespace


#http://localhost:5000/swagger


# ===============================
# üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask + Swagger –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é
# ===============================
app = Flask(__name__)

authorizations = {
    'apikey': {
        'type': 'apiKey',
        'in': 'header',
        'name': 'Authorization'
    }
}

api = Api(
    app,
    version='1.0',
    title='Hillel API',
    description='üìò CRUD + –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Swagger',
    doc='/swagger',
    authorizations=authorizations,
    security='apikey'  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—î —Ç–æ–∫–µ–Ω –¥–æ –∑–∞—Ö–∏—â–µ–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
)

# ===============================
# üß† –Ü–º—ñ—Ç–∞—Ü—ñ—è –ë–î
# ===============================
users = {}
items = {}
auth_token = "secret-token"  # –¢–µ—Å—Ç–æ–≤–∏–π —Ç–æ–∫–µ–Ω

# ===============================
# üß± –ú–æ–¥–µ–ª—ñ Swagger
# ===============================
user_model = api.model('User', {
    'username': fields.String(required=True),
    'password': fields.String(required=True),
})

item_model = api.model('Item', {
    'id': fields.Integer(required=True),
    'name': fields.String(required=True),
    'description': fields.String(required=False),
})

# ===============================
# üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
# ===============================
auth_ns = Namespace('auth', description='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è')

@auth_ns.route('/signup')
class Signup(Resource):
    @auth_ns.expect(user_model)
    def post(self):
        """‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        data = request.json
        if data['username'] in users:
            return {'message': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î'}, 400
        users[data['username']] = data['password']
        return {'message': '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞'}

@auth_ns.route('/login')
class Login(Resource):
    @auth_ns.expect(user_model)
    def post(self):
        """üîê –í—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        data = request.json
        if users.get(data['username']) != data['password']:
            return {'message': '–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å'}, 401
        return {'token': auth_token}

# ===============================
# üìÅ CRUD –æ–ø–µ—Ä–∞—Ü—ñ—ó
# ===============================
crud_ns = Namespace('items', description='üì¶ CRUD –û–ø–µ—Ä–∞—Ü—ñ—ó –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏')

@crud_ns.route('/')
class ItemList(Resource):
    @crud_ns.doc(security='apikey')
    def get(self):
        """üì• –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ)"""
        if request.headers.get("Authorization") != f"Bearer {auth_token}":
            return {'message': 'Unauthorized'}, 401
        return list(items.values())

    @crud_ns.expect(item_model)
    def post(self):
        """‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç"""
        data = request.json
        if data['id'] in items:
            return {'message': '–ï–ª–µ–º–µ–Ω—Ç –∑ —Ç–∞–∫–∏–º ID –≤–∂–µ —ñ—Å–Ω—É—î'}, 400
        items[data['id']] = data
        return data, 201

@crud_ns.route('/<int:item_id>')
class Item(Resource):
    def get(self, item_id):
        """üìÑ –û—Ç—Ä–∏–º–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –∑–∞ ID"""
        item = items.get(item_id)
        return item if item else {'message': '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}, 404

    @crud_ns.expect(item_model)
    def put(self, item_id):
        """‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç"""
        if item_id not in items:
            return {'message': '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}, 404
        items[item_id] = request.json
        return items[item_id]

    def delete(self, item_id):
        """‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç"""
        if item_id not in items:
            return {'message': '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}, 404
        del items[item_id]
        return {'message': '–í–∏–¥–∞–ª–µ–Ω–æ'}

# ===============================
# ‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è namespace'—ñ–≤
# ===============================
api.add_namespace(auth_ns, path='/auth')
api.add_namespace(crud_ns, path='/items')

# ===============================
# ‚ñ∂Ô∏è –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É
# ===============================
if __name__ == '__main__':
    app.run(debug=True)
