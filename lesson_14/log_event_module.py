# log_event_module.py

import logging
import os

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
LOG_FILE = os.path.join(BASE_DIR, "login_system.log")

# LOG_FILE = "login_system.log" # –ó–∞–¥–∞—î–º–æ –Ω–∞–∑–≤—É –ª–æ–≥-—Ñ–∞–π–ª—É, –≤ —è–∫–∏–π –±—É–¥–µ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è

# –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –ª–æ–≥–µ—Ä
logger = logging.getLogger("log_event") # –°—Ç–≤–æ—Ä—é—î–º–æ (–∞–±–æ –æ—Ç—Ä–∏–º—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π) –ª–æ–≥–µ—Ä —ñ–∑ –Ω–∞–∑–≤–æ—é
logger.setLevel(logging.DEBUG) # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥ —è–∫–æ–≥–æ —Ä—ñ–≤–Ω—è –±—É–¥–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è, DEBUG ‚Äî –Ω–∞–π–Ω–∏–∂—á–∏–π —Ä—ñ–≤–µ–Ω—å = –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

#–î–æ–¥–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑
if not logger.handlers: # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —É –ª–æ–≥–µ—Ä–∞ –≤–∂–µ —î –æ–±—Ä–æ–±–Ω–∏–∫–∏ (handlers)
    # --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ñ–∞–π–ª—É ---
    file_handler = logging.FileHandler(LOG_FILE, mode='a')
    file_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(file_formatter) # –ü—Ä–∏–≤‚Äô—è–∑—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞, —â–æ–± –≤—Å—ñ –∑–∞–ø–∏—Å–∏ —É –ª–æ–≥-—Ñ–∞–π–ª—ñ –º–∞–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –≤–∏–≥–ª—è–¥
    logger.addHandler(file_handler) # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–æ –ª–æ–≥–µ—Ä–∞

    # --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ ---
    console_handler = logging.StreamHandler()
    console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)

# # –ó–∞—á–∏—â–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏, —è–∫—â–æ –≤–æ–Ω–∏ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å
# if logger.hasHandlers():
#     logger.handlers.clear()
#
# file_handler = logging.FileHandler(LOG_FILE, mode='a')
# file_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
# file_handler.setFormatter(file_formatter)
# logger.addHandler(file_handler)
#
# console_handler = logging.StreamHandler()
# console_formatter = logging.Formatter('%(levelname)s - %(message)s')
# console_handler.setFormatter(console_formatter)
# logger.addHandler(console_handler)

def log_event(username: str, status: str):

# –õ–æ–≥—É—î –ø–æ–¥—ñ—é –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É.
    log_message = f"Login event - Username: {username}, Status: {status}" #–§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –±—É–¥–µ –∑–∞–ø–∏—Å–∞–Ω–æ —É –ª–æ–≥.

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —Ä—ñ–≤–Ω–µ–º –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ:
    if status == "success":
        logger.info(log_message)
    elif status == "expired":
        logger.warning(log_message)
    else:
        logger.error(log_message)

# üî∏ –†—É—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
if __name__ == "__main__":
    log_event("admin", "success") # –£ —Ñ–∞–π–ª –∑–∞–ø–∏—Å—É—î—Ç—å—Å—è: 2025-08-07 20:42:33,987 - INFO - Login event - Username: admin, Status: success
    log_event("admin", "expired")
    log_event("admin", "failed")
    log_event("admin", "unknown")
    print(f"Logs are saved in a file: {LOG_FILE}")

